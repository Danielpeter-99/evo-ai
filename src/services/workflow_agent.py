from datetime import datetime
from google.adk.agents import BaseAgent
from google.adk.agents.invocation_context import InvocationContext
from google.adk.events import Event
from google.genai.types import Content, Part

from typing import AsyncGenerator, Dict, Any, List, TypedDict, Annotated
import json
import uuid
import asyncio
import httpx
import threading

from google.adk.runners import Runner
from src.services.agent_service import get_agent

# Remover importa√ß√£o circular
# from src.services.agent_builder import AgentBuilder

from sqlalchemy.orm import Session

from langgraph.graph import StateGraph, END


class State(TypedDict):
    content: List[Event]
    status: str
    session_id: str
    # Additional fields to store any node outputs
    node_outputs: Dict[str, Any]
    # Cycle counter to prevent infinite loops
    cycle_count: int
    conversation_history: List[Event]


class WorkflowAgent(BaseAgent):
    """
    Agente que implementa fluxos de trabalho usando LangGraph.

    Este agente permite definir e executar fluxos complexos entre v√°rios agentes
    utilizando o LangGraph para orquestra√ß√£o.
    """

    # Declara√ß√µes de campo para Pydantic
    flow_json: Dict[str, Any]
    timeout: int
    db: Session

    def __init__(
        self,
        name: str,
        flow_json: Dict[str, Any],
        timeout: int = 300,
        sub_agents: List[BaseAgent] = [],
        db: Session = None,
        **kwargs,
    ):
        """
        Inicializa o agente de workflow.

        Args:
            name: Nome do agente
            flow_json: Defini√ß√£o do fluxo em formato JSON
            timeout: Tempo m√°ximo de execu√ß√£o (segundos)
            sub_agents: Lista de sub-agentes a serem executados ap√≥s o agente de workflow
            db: Session
        """
        # Inicializar classe base
        super().__init__(
            name=name,
            flow_json=flow_json,
            timeout=timeout,
            sub_agents=sub_agents,
            db=db,
            **kwargs,
        )

        print(
            f"Agente de workflow inicializado com {len(flow_json.get('nodes', []))} n√≥s"
        )

    async def _create_node_functions(self, ctx: InvocationContext):
        """Cria as fun√ß√µes para cada tipo de n√≥ no fluxo."""

        # Fun√ß√£o para o n√≥ inicial
        async def start_node_function(
            state: State,
            node_id: str,
            node_data: Dict[str, Any],
        ) -> AsyncGenerator[State, None]:
            print("\nüèÅ N√ì INICIAL")

            content = state.get("content", [])

            if not content:
                content = [
                    Event(
                        author="agent",
                        content=Content(parts=[Part(text="Content not found")]),
                    )
                ]
                yield {
                    "content": content,
                    "status": "error",
                    "node_outputs": {},
                    "cycle_count": 0,
                    "conversation_history": ctx.session.events,
                }
                return
            session_id = state.get("session_id", "")

            # Armazenar resultados espec√≠ficos para este n√≥
            node_outputs = state.get("node_outputs", {})
            node_outputs[node_id] = {"started_at": datetime.now().isoformat()}

            yield {
                "content": content,
                "status": "started",
                "node_outputs": node_outputs,
                "cycle_count": 0,
                "session_id": session_id,
                "conversation_history": ctx.session.events,
            }

        # Fun√ß√£o gen√©rica para n√≥s de agente
        async def agent_node_function(
            state: State, node_id: str, node_data: Dict[str, Any]
        ) -> AsyncGenerator[State, None]:

            agent_config = node_data.get("agent", {})
            agent_name = agent_config.get("name", "")
            agent_id = agent_config.get("id", "")

            # Incrementar contador de ciclos
            cycle_count = state.get("cycle_count", 0) + 1
            print(f"\nüë§ AGENTE: {agent_name} (Ciclo {cycle_count})")

            content = state.get("content", [])
            session_id = state.get("session_id", "")

            # Obter o hist√≥rico de conversa
            conversation_history = state.get("conversation_history", [])

            agent = get_agent(self.db, agent_id)

            if not agent:
                yield {
                    "content": [
                        Event(
                            author="agent",
                            content=Content(parts=[Part(text="Agent not found")]),
                        )
                    ],
                    "session_id": session_id,
                    "status": "error",
                    "node_outputs": {},
                    "cycle_count": cycle_count,
                    "conversation_history": conversation_history,
                }
                return

            # Importa√ß√£o movida para dentro da fun√ß√£o para evitar circular import
            from src.services.agent_builder import AgentBuilder

            agent_builder = AgentBuilder(self.db)
            root_agent, exit_stack = await agent_builder.build_agent(agent)

            new_content = []
            async for event in root_agent.run_async(ctx):
                conversation_history.append(event)
                new_content.append(event)

            print(f"New content: {str(new_content)}")

            node_outputs = state.get("node_outputs", {})
            node_outputs[node_id] = {
                "processed_by": agent_name,
                "agent_content": new_content,
                "cycle": cycle_count,
            }

            yield {
                "content": new_content,
                "status": "processed_by_agent",
                "node_outputs": node_outputs,
                "cycle_count": cycle_count,
                "conversation_history": conversation_history,
                "session_id": session_id,
            }

            if exit_stack:
                await exit_stack.aclose()

        # Fun√ß√£o para n√≥s de condi√ß√£o
        async def condition_node_function(
            state: State, node_id: str, node_data: Dict[str, Any]
        ) -> AsyncGenerator[State, None]:
            label = node_data.get("label", "Condi√ß√£o Sem Nome")
            conditions = node_data.get("conditions", [])
            cycle_count = state.get("cycle_count", 0)

            print(f"\nüîÑ CONDI√á√ÉO: {label} (Ciclo {cycle_count})")

            content = state.get("content", [])
            print(f"Avaliando condi√ß√£o para conte√∫do: '{content}'")

            session_id = state.get("session_id", "")
            conversation_history = state.get("conversation_history", [])

            # Verificar todas as condi√ß√µes
            conditions_met = []
            for condition in conditions:
                condition_id = condition.get("id")
                condition_data = condition.get("data", {})
                field = condition_data.get("field")
                operator = condition_data.get("operator")
                expected_value = condition_data.get("value")

                print(
                    f"  Verificando se {field} {operator} '{expected_value}' (valor atual: '{state.get(field, '')}')"
                )
                if self._evaluate_condition(condition, state):
                    conditions_met.append(condition_id)
                    print(f"  ‚úÖ Condi√ß√£o {condition_id} atendida!")

            # Verificar se o ciclo atingiu o limite (seguran√ßa extra)
            if cycle_count >= 10:
                print(
                    f"‚ö†Ô∏è ATEN√á√ÉO: Limite de ciclos atingido ({cycle_count}). For√ßando t√©rmino."
                )
                yield {
                    "status": "cycle_limit_reached",
                    "node_outputs": state.get("node_outputs", {}),
                    "cycle_count": cycle_count,
                    "conversation_history": conversation_history,
                    "session_id": session_id,
                }
                return

            # Armazenar resultados espec√≠ficos para este n√≥
            node_outputs = state.get("node_outputs", {})
            node_outputs[node_id] = {
                "condition_evaluated": label,
                "content_evaluated": content,
                "conditions_met": conditions_met,
                "cycle": cycle_count,
            }

            yield {
                "status": "condition_evaluated",
                "node_outputs": node_outputs,
                "cycle_count": cycle_count,
                "conversation_history": conversation_history,
                "session_id": session_id,
            }

        return {
            "start-node": start_node_function,
            "agent-node": agent_node_function,
            "condition-node": condition_node_function,
        }

    def _evaluate_condition(self, condition: Dict[str, Any], state: State) -> bool:
        """Avalia uma condi√ß√£o contra o estado atual."""
        condition_type = condition.get("type")
        condition_data = condition.get("data", {})

        if condition_type == "previous-output":
            field = condition_data.get("field")
            operator = condition_data.get("operator")
            expected_value = condition_data.get("value")

            actual_value = state.get(field, "")

            # Tratamento especial para quando content √© uma lista de Event
            if field == "content" and isinstance(actual_value, list) and actual_value:
                # Extrai o texto de cada evento para compara√ß√£o
                extracted_texts = []
                for event in actual_value:
                    if hasattr(event, "content") and hasattr(event.content, "parts"):
                        for part in event.content.parts:
                            if hasattr(part, "text") and part.text:
                                extracted_texts.append(part.text)

                if extracted_texts:
                    actual_value = " ".join(extracted_texts)
                    print(f"  Texto extra√≠do dos eventos: '{actual_value[:100]}...'")

            # Converter valores para string para facilitar compara√ß√µes
            if actual_value is not None:
                actual_str = str(actual_value)
            else:
                actual_str = ""

            if expected_value is not None:
                expected_str = str(expected_value)
            else:
                expected_str = ""

            # Verifica√ß√µes de defini√ß√£o
            if operator == "is_defined":
                result = actual_value is not None and actual_value != ""
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result
            elif operator == "is_not_defined":
                result = actual_value is None or actual_value == ""
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result

            # Verifica√ß√µes de igualdade
            elif operator == "equals":
                result = actual_str == expected_str
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result
            elif operator == "not_equals":
                result = actual_str != expected_str
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result

            # Verifica√ß√µes de conte√∫do
            elif operator == "contains":
                # Converter ambos para min√∫sculas para compara√ß√£o sem diferencia√ß√£o
                expected_lower = expected_str.lower()
                actual_lower = actual_str.lower()
                print(
                    f"  Compara√ß√£o 'contains' sem distin√ß√£o de mai√∫sculas/min√∫sculas: '{expected_lower}' em '{actual_lower[:100]}...'"
                )
                result = expected_lower in actual_lower
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result
            elif operator == "not_contains":
                expected_lower = expected_str.lower()
                actual_lower = actual_str.lower()
                print(
                    f"  Compara√ß√£o 'not_contains' sem distin√ß√£o de mai√∫sculas/min√∫sculas: '{expected_lower}' em '{actual_lower[:100]}...'"
                )
                result = expected_lower not in actual_lower
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result

            # Verifica√ß√µes de in√≠cio e fim
            elif operator == "starts_with":
                result = actual_str.lower().startswith(expected_str.lower())
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result
            elif operator == "ends_with":
                result = actual_str.lower().endswith(expected_str.lower())
                print(f"  Verifica√ß√£o '{operator}': {result}")
                return result

            # Verifica√ß√µes num√©ricas (tentando converter para n√∫mero)
            elif operator in [
                "greater_than",
                "greater_than_or_equal",
                "less_than",
                "less_than_or_equal",
            ]:
                try:
                    actual_num = float(actual_str) if actual_str else 0
                    expected_num = float(expected_str) if expected_str else 0

                    if operator == "greater_than":
                        result = actual_num > expected_num
                    elif operator == "greater_than_or_equal":
                        result = actual_num >= expected_num
                    elif operator == "less_than":
                        result = actual_num < expected_num
                    elif operator == "less_than_or_equal":
                        result = actual_num <= expected_num
                    print(f"  Verifica√ß√£o num√©rica '{operator}': {result}")
                    return result
                except (ValueError, TypeError):
                    # Se n√£o for poss√≠vel converter para n√∫mero, retorna falso
                    print(
                        f"  Erro ao converter valores para compara√ß√£o num√©rica: '{actual_str[:100]}...' e '{expected_str}'"
                    )
                    return False

            # Verifica√ß√µes com express√µes regulares
            elif operator == "matches":
                import re

                try:
                    pattern = re.compile(expected_str, re.IGNORECASE)
                    result = bool(pattern.search(actual_str))
                    print(f"  Verifica√ß√£o '{operator}': {result}")
                    return result
                except re.error:
                    print(f"  Erro na express√£o regular: '{expected_str}'")
                    return False
            elif operator == "not_matches":
                import re

                try:
                    pattern = re.compile(expected_str, re.IGNORECASE)
                    result = not bool(pattern.search(actual_str))
                    print(f"  Verifica√ß√£o '{operator}': {result}")
                    return result
                except re.error:
                    print(f"  Erro na express√£o regular: '{expected_str}'")
                    return True  # Se a regex for inv√°lida, consideramos que n√£o houve match

        return False

    def _create_flow_router(self, flow_data: Dict[str, Any]):
        """Cria um roteador baseado nas conex√µes no flow.json."""
        # Mapear conex√µes para entender como os n√≥s se conectam
        edges_map = {}

        for edge in flow_data.get("edges", []):
            source = edge.get("source")
            target = edge.get("target")
            source_handle = edge.get("sourceHandle", "default")

            if source not in edges_map:
                edges_map[source] = {}

            # Armazenar o destino para cada handle espec√≠fico
            edges_map[source][source_handle] = target

        # Mapear n√≥s de condi√ß√£o e suas condi√ß√µes
        condition_nodes = {}
        for node in flow_data.get("nodes", []):
            if node.get("type") == "condition-node":
                node_id = node.get("id")
                conditions = node.get("data", {}).get("conditions", [])
                condition_nodes[node_id] = conditions

        # Fun√ß√£o de roteamento para cada n√≥ espec√≠fico
        def create_router_for_node(node_id: str):
            def router(state: State) -> str:
                print(f"Roteando a partir do n√≥: {node_id}")

                # Verificar se o limite de ciclos foi atingido
                cycle_count = state.get("cycle_count", 0)
                if cycle_count >= 10:
                    print(
                        f"‚ö†Ô∏è Limite de ciclos ({cycle_count}) atingido. Finalizando o fluxo."
                    )
                    return END

                # Se for um n√≥ de condi√ß√£o, avaliar as condi√ß√µes
                if node_id in condition_nodes:
                    conditions = condition_nodes[node_id]

                    for condition in conditions:
                        condition_id = condition.get("id")

                        # Verificar se a condi√ß√£o √© atendida
                        is_condition_met = self._evaluate_condition(condition, state)

                        if is_condition_met:
                            print(
                                f"Condi√ß√£o {condition_id} atendida. Movendo para o pr√≥ximo n√≥."
                            )

                            # Encontrar a conex√£o que usa este condition_id como handle
                            if (
                                node_id in edges_map
                                and condition_id in edges_map[node_id]
                            ):
                                return edges_map[node_id][condition_id]
                        else:
                            print(
                                f"Condi√ß√£o {condition_id} N√ÉO atendida. Continuando avalia√ß√£o ou usando caminho padr√£o."
                            )

                    # Se nenhuma condi√ß√£o for atendida, usar o bottom-handle se dispon√≠vel
                    if node_id in edges_map and "bottom-handle" in edges_map[node_id]:
                        print(
                            "Nenhuma condi√ß√£o atendida. Usando caminho padr√£o (bottom-handle)."
                        )
                        return edges_map[node_id]["bottom-handle"]
                    else:
                        print(
                            "Nenhuma condi√ß√£o atendida e n√£o h√° caminho padr√£o. Encerrando fluxo."
                        )
                        return END

                # Para n√≥s regulares, simplesmente seguir a primeira conex√£o dispon√≠vel
                if node_id in edges_map:
                    # Tentar usar o handle padr√£o ou bottom-handle primeiro
                    for handle in ["default", "bottom-handle"]:
                        if handle in edges_map[node_id]:
                            return edges_map[node_id][handle]

                    # Se nenhum handle espec√≠fico for encontrado, usar o primeiro dispon√≠vel
                    if edges_map[node_id]:
                        first_handle = list(edges_map[node_id].keys())[0]
                        return edges_map[node_id][first_handle]

                # Se n√£o houver conex√£o de sa√≠da, encerrar o fluxo
                print(
                    f"Nenhum caminho a seguir a partir do n√≥ {node_id}. Encerrando fluxo."
                )
                return END

            return router

        return create_router_for_node

    async def _create_graph(
        self, ctx: InvocationContext, flow_data: Dict[str, Any]
    ) -> StateGraph:
        """Cria um StateGraph a partir dos dados do fluxo."""
        # Extrair n√≥s do fluxo
        nodes = flow_data.get("nodes", [])

        # Inicializar StateGraph
        graph_builder = StateGraph(State)

        # Criar fun√ß√µes para cada tipo de n√≥
        node_functions = await self._create_node_functions(ctx)

        # Dicion√°rio para armazenar fun√ß√µes espec√≠ficas para cada n√≥
        node_specific_functions = {}

        # Adicionar n√≥s ao grafo
        for node in nodes:
            node_id = node.get("id")
            node_type = node.get("type")
            node_data = node.get("data", {})

            if node_type in node_functions:
                # Criar uma fun√ß√£o espec√≠fica para este n√≥
                def create_node_function(node_type, node_id, node_data):
                    async def node_function(state):
                        # Consumir o gerador ass√≠ncrono e retornar o √∫ltimo resultado
                        result = None
                        async for item in node_functions[node_type](
                            state, node_id, node_data
                        ):
                            result = item
                        return result

                    return node_function

                # Adicionar fun√ß√£o espec√≠fica ao dicion√°rio
                node_specific_functions[node_id] = create_node_function(
                    node_type, node_id, node_data
                )

                # Adicionar o n√≥ ao grafo
                print(f"Adicionando n√≥ {node_id} do tipo {node_type}")
                graph_builder.add_node(node_id, node_specific_functions[node_id])

        # Criar fun√ß√£o para gerar roteadores espec√≠ficos
        create_router = self._create_flow_router(flow_data)

        # Adicionar conex√µes condicionais para cada n√≥
        for node in nodes:
            node_id = node.get("id")

            if node_id in node_specific_functions:
                # Criar dicion√°rio de poss√≠veis destinos
                edge_destinations = {}

                # Mapear todos os poss√≠veis destinos
                for edge in flow_data.get("edges", []):
                    if edge.get("source") == node_id:
                        target = edge.get("target")
                        if target in node_specific_functions:
                            edge_destinations[target] = target

                # Adicionar END como poss√≠vel destino
                edge_destinations[END] = END

                # Criar roteador espec√≠fico para este n√≥
                node_router = create_router(node_id)

                # Adicionar conex√µes condicionais
                print(f"Adicionando conex√µes condicionais para o n√≥ {node_id}")
                print(f"Destinos poss√≠veis: {edge_destinations}")

                graph_builder.add_conditional_edges(
                    node_id, node_router, edge_destinations
                )

        # Encontrar o n√≥ inicial (geralmente o start-node)
        entry_point = None
        for node in nodes:
            if node.get("type") == "start-node":
                entry_point = node.get("id")
                break

        # Se n√£o houver start-node, usar o primeiro n√≥ encontrado
        if not entry_point and nodes:
            entry_point = nodes[0].get("id")

        # Definir ponto de entrada
        if entry_point:
            print(f"Definindo ponto de entrada: {entry_point}")
            graph_builder.set_entry_point(entry_point)

        # Compilar o grafo
        return graph_builder.compile()

    async def _run_async_impl(
        self, ctx: InvocationContext
    ) -> AsyncGenerator[Event, None]:
        """
        Implementa√ß√£o do agente de workflow.

        Este m√©todo segue o padr√£o de implementa√ß√£o de agentes personalizados,
        executando o fluxo de trabalho definido e retornando os resultados.
        """

        try:
            # 1. Extrair a mensagem do usu√°rio do contexto
            user_message = None

            # Procurar a mensagem do usu√°rio nos eventos da sess√£o
            if ctx.session and hasattr(ctx.session, "events") and ctx.session.events:
                for event in reversed(ctx.session.events):
                    if event.author == "user" and event.content and event.content.parts:
                        user_message = event.content.parts[0].text
                        print("Mensagem encontrada nos eventos da sess√£o")
                        break

            # Verificar no estado da sess√£o se a mensagem n√£o foi encontrada nos eventos
            if not user_message and ctx.session and ctx.session.state:
                if "user_message" in ctx.session.state:
                    user_message = ctx.session.state["user_message"]
                elif "message" in ctx.session.state:
                    user_message = ctx.session.state["message"]

            # 2. Usar o ID da sess√£o como identificador est√°vel
            session_id = (
                str(ctx.session.id)
                if ctx.session and hasattr(ctx.session, "id")
                else str(uuid.uuid4())
            )

            # 3. Criar o grafo de fluxo de trabalho a partir do JSON fornecido
            graph = await self._create_graph(ctx, self.flow_json)

            # 4. Preparar o estado inicial
            initial_state = State(
                content=[
                    Event(
                        author="user",
                        content=Content(parts=[Part(text=user_message)]),
                    )
                ],
                status="started",
                session_id=session_id,
                cycle_count=0,
                node_outputs={},
                conversation_history=ctx.session.events,
            )

            # 5. Executar o grafo
            print("\nüöÄ Iniciando execu√ß√£o do fluxo de trabalho:")
            print(f"Conte√∫do inicial: {user_message[:100]}...")

            # Executar o grafo com limite de recurs√£o para evitar loops infinitos
            result = await graph.ainvoke(initial_state, {"recursion_limit": 20})

            # 6. Processar e retornar o resultado
            final_content = result.get("content", [])
            print(f"\n‚úÖ RESULTADO FINAL: {final_content[:100]}...")

            for content in final_content:
                yield content

            # Executar sub-agentes
            for sub_agent in self.sub_agents:
                async for event in sub_agent.run_async(ctx):
                    yield event

        except Exception as e:
            # Tratar qualquer erro n√£o capturado
            error_msg = f"Erro ao executar o agente de workflow: {str(e)}"
            print(error_msg)
            yield Event(
                author=self.name,
                content=Content(
                    role="agent",
                    parts=[Part(text=error_msg)],
                ),
            )
